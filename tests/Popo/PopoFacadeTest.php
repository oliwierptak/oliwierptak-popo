<?php

declare(strict_types = 1);

namespace Tests\Popo;

use InvalidArgumentException;
use PHPUnit\Framework\TestCase;
use Popo\Builder\BuilderConfigurator;
use Popo\PopoFacade;
use Popo\PopoFactory;
use Popo\Schema\Reader\SchemaInterface;
use Popo\Schema\SchemaConfigurator;
use function trim;
use const Popo\APPLICATION_DIR;
use const Popo\TESTS_DIR;

class PopoFacadeTest extends TestCase
{
    /**
     * @var string
     */
    protected $schemaDirectory;

    /**
     * @var string
     */
    protected $templateDirectory;

    /**
     * @var \Popo\PopoFactoryInterface
     */
    protected $popoFactory;

    /**
     * @var string
     */
    protected $outputDirectory;

    protected function setUp(): void
    {
        $this->popoFactory = new PopoFactory();

        $this->schemaDirectory = TESTS_DIR . 'fixtures/';
        $this->templateDirectory = APPLICATION_DIR . 'templates/';
        $this->outputDirectory = TESTS_DIR . 'App/Generated/';
    }

    protected function buildSchema(array $schemaData): SchemaInterface
    {
        $schema = $this->popoFactory
            ->createReaderFactory()->createSchema($schemaData);

        return $schema;
    }

    public function testDirectoriesShouldExist(): void
    {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessageMatches('/^Required schema directory does not exist under path:/');

        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setSchemaConfigurator(new SchemaConfigurator())
            ->setSchemaDirectory($this->schemaDirectory . 'invalidPath')
            ->setTemplateDirectory($this->templateDirectory . 'invalidPath')
            ->setOutputDirectory($this->outputDirectory . 'invalidPath')
            ->setNamespace('Tests\App\Generated\Popo')
            ->setExtension('.php');

        $facade->generatePopo($configurator);
    }

    public function testGeneratePopo(): void
    {
        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setSchemaConfigurator(new SchemaConfigurator())
            ->setSchemaDirectory($this->schemaDirectory . 'popo/bundles/')
            ->setTemplateDirectory($this->templateDirectory)
            ->setOutputDirectory($this->outputDirectory . 'Popo/')
            ->setNamespace('Tests\App\Generated\Popo')
            ->setExtension('.php');

        $facade->generatePopo($configurator);

        new \Tests\App\Generated\Popo\Buzz();
        new \Tests\App\Generated\Popo\Foo();
        new \Tests\App\Generated\Popo\FooBar();

        $this->assertFileNotExists(TESTS_DIR . 'App/Generated/Popo/BuzzInterface.php');
        $this->assertFileNotExists(TESTS_DIR . 'App/Generated/Popo/FooInterface.php');
        $this->assertFileNotExists(TESTS_DIR . 'App/Generated/Popo/FooBarInterface.php');
    }

    public function testGenerateDto(): void
    {
        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setSchemaConfigurator(new SchemaConfigurator())
            ->setSchemaDirectory($this->schemaDirectory . 'dto/bundles/')
            ->setTemplateDirectory($this->templateDirectory)
            ->setOutputDirectory($this->outputDirectory . 'Dto/')
            ->setNamespace('Tests\App\Generated\Dto')
            ->setExtension('.php');

        $facade->generateDto($configurator);

        $buzzPopo = new \Tests\App\Generated\Dto\Buzz();
        $fooPopo = new \Tests\App\Generated\Dto\Foo();
        $fooBarPopo = new \Tests\App\Generated\Dto\FooBar();

        $this->assertInstanceOf(\Tests\App\Generated\Dto\BuzzInterface::class, $buzzPopo);
        $this->assertInstanceOf(\Tests\App\Generated\Dto\FooInterface::class, $fooPopo);
        $this->assertInstanceOf(\Tests\App\Generated\Dto\FooBarInterface::class, $fooBarPopo);
    }

    public function testGeneratePopoString(): void
    {
        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setTemplateDirectory($this->templateDirectory)
            ->setNamespace('Popo\Tests');

        $schemaData = [
            'name' => 'FooGenerated',
            'schema' => [[
                'name' => 'fooId',
                'type' => 'int',
            ]],
        ];

        $schema = $this->buildSchema($schemaData);
        $generatedString = $facade->generatePopoString($configurator, $schema);

        $expectedString = '
<?php

declare(strict_types = 1);

namespace Popo\Tests;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
class FooGenerated 
{
    /**
     * @var array
     */
    protected $data = array (
);

    /**
     * @var array
     */
    protected $default = array (
);

    /**
    * @var array
    */
    protected $propertyMapping = array (
  \'fooId\' => \'int\',
);

    /**
    * @var array
    */
    protected $collectionItems = array (
  \'fooId\' => \'\',
);

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            return null;
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;
    }

    /**
     * @return array
     */
    protected function getPropertyNames(): array
    {
        return \array_keys(
            $this->propertyMapping
        );
    }

    /**
     * @return array
     */
    public function toArray(): array
    {
        $data = [];
        foreach ($this->propertyMapping as $key => $type) {
            $data[$key] = $this->default[$key] ?? null;

            if (isset($this->data[$key])) {
                $value = $this->data[$key];

                if ($this->collectionItems[$key] !== \'\') {
                    if (\is_array($value) && \class_exists($this->collectionItems[$key])) {
                        foreach ($value as $popo) {
                            if (\method_exists($popo, \'toArray\')) {
                                $data[$key][] = $popo->toArray();
                            }
                        }
                    }
                } else {
                    $data[$key] = $value;
                }

                if (\is_object($value) && \method_exists($value, \'toArray\')) {
                    $data[$key] = $value->toArray();
                }
            }
        }

        return $data;
    }

    public function fromArray(array $data): \Popo\Tests\FooGenerated
    {
        $result = [];
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = null;
            if (\array_key_exists($key, $this->default)) {
                $result[$key] = $this->default[$key];
            }
            if (\array_key_exists($key, $data)) {
                if ($this->isCollectionItem($key, $data)) {
                    foreach ($data[$key] as $popoData) {
                        $popo = new $this->collectionItems[$key]();
                        if (\method_exists($popo, \'fromArray\')) {
                            $popo->fromArray($popoData);
                        }
                        $result[$key][] = $popo;
                    }
                } else {
                    $result[$key] = $data[$key];
                }
            }

            if (\is_array($result[$key]) && \class_exists($type)) {
                $popo = new $type();
                if (\method_exists($popo, \'fromArray\')) {
                    $popo->fromArray($result[$key]);
                }
                $result[$key] = $popo;
            }
        }

        $this->data = $result;

        return $this;
    }

    protected function isCollectionItem(string $key, array $data): bool
    {
        return $this->collectionItems[$key] !== \'\' &&
            \is_array($data[$key]) &&
            \class_exists($this->collectionItems[$key]);
    }

    /**
     * @param string $property
     *
     * @throws \UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new \UnexpectedValueException(\sprintf(
                \'Required value of "%s" has not been set\',
                $property
            ));
        }
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @throws \InvalidArgumentException
     * @return void
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = \trim(\strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!\is_array($collection) || $type !== \'array\') {
            throw new \InvalidArgumentException(\'Cannot add item to non array type: \' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    
    /**
     * @return integer|null
     */
    public function getFooId(): ?int
    {
        return $this->popoGetValue(\'fooId\');
    }

    /**
     * @param integer|null $fooId
     *
     * @return self
     */
    public function setFooId(?int $fooId): \Popo\Tests\FooGenerated
    {
        $this->popoSetValue(\'fooId\', $fooId);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireFooId(): int
    {
        $this->assertPropertyValue(\'fooId\');

        return (int)$this->popoGetValue(\'fooId\');
    }


    
}
';
        $this->assertEquals(trim($expectedString), trim($generatedString));
    }

    public function testGenerateDtoString(): void
    {
        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setTemplateDirectory($this->templateDirectory)
            ->setNamespace('Popo\Tests');

        $schemaData = [
            'name' => 'FooGenerated',
            'schema' => [[
                'name' => 'fooId',
                'type' => 'int',
            ]],
        ];

        $schema = $this->buildSchema($schemaData);
        $generatedString = $facade->generateDtoString($configurator, $schema);

        $expectedString = '
<?php

declare(strict_types = 1);

namespace Popo\Tests;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
class FooGenerated implements \Popo\Tests\FooGeneratedInterface
{
    /**
     * @var array
     */
    protected $data = array (
);

    /**
     * @var array
     */
    protected $default = array (
);

    /**
    * @var array
    */
    protected $propertyMapping = array (
  \'fooId\' => \'int\',
);

    /**
    * @var array
    */
    protected $collectionItems = array (
  \'fooId\' => \'\',
);

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            return null;
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;
    }

    /**
     * @return array
     */
    protected function getPropertyNames(): array
    {
        return \array_keys(
            $this->propertyMapping
        );
    }

    /**
     * @return array
     */
    public function toArray(): array
    {
        $data = [];
        foreach ($this->propertyMapping as $key => $type) {
            $data[$key] = $this->default[$key] ?? null;

            if (isset($this->data[$key])) {
                $value = $this->data[$key];

                if ($this->collectionItems[$key] !== \'\') {
                    if (\is_array($value) && \class_exists($this->collectionItems[$key])) {
                        foreach ($value as $popo) {
                            if (\method_exists($popo, \'toArray\')) {
                                $data[$key][] = $popo->toArray();
                            }
                        }
                    }
                } else {
                    $data[$key] = $value;
                }

                if (\is_object($value) && \method_exists($value, \'toArray\')) {
                    $data[$key] = $value->toArray();
                }
            }
        }

        return $data;
    }

    public function fromArray(array $data): \Popo\Tests\FooGeneratedInterface
    {
        $result = [];
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = null;
            if (\array_key_exists($key, $this->default)) {
                $result[$key] = $this->default[$key];
            }
            if (\array_key_exists($key, $data)) {
                if ($this->isCollectionItem($key, $data)) {
                    foreach ($data[$key] as $popoData) {
                        $popo = new $this->collectionItems[$key]();
                        if (\method_exists($popo, \'fromArray\')) {
                            $popo->fromArray($popoData);
                        }
                        $result[$key][] = $popo;
                    }
                } else {
                    $result[$key] = $data[$key];
                }
            }

            if (\is_array($result[$key]) && \class_exists($type)) {
                $popo = new $type();
                if (\method_exists($popo, \'fromArray\')) {
                    $popo->fromArray($result[$key]);
                }
                $result[$key] = $popo;
            }
        }

        $this->data = $result;

        return $this;
    }

    protected function isCollectionItem(string $key, array $data): bool
    {
        return $this->collectionItems[$key] !== \'\' &&
            \is_array($data[$key]) &&
            \class_exists($this->collectionItems[$key]);
    }

    /**
     * @param string $property
     *
     * @throws \UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new \UnexpectedValueException(\sprintf(
                \'Required value of "%s" has not been set\',
                $property
            ));
        }
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @throws \InvalidArgumentException
     * @return void
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = \trim(\strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!\is_array($collection) || $type !== \'array\') {
            throw new \InvalidArgumentException(\'Cannot add item to non array type: \' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    
    /**
     * @return integer|null
     */
    public function getFooId(): ?int
    {
        return $this->popoGetValue(\'fooId\');
    }

    /**
     * @param integer|null $fooId
     *
     * @return self
     */
    public function setFooId(?int $fooId): \Popo\Tests\FooGeneratedInterface
    {
        $this->popoSetValue(\'fooId\', $fooId);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireFooId(): int
    {
        $this->assertPropertyValue(\'fooId\');

        return (int)$this->popoGetValue(\'fooId\');
    }


    
}
';

        $this->assertEquals(trim($expectedString), trim($generatedString));
    }

    public function testGenerateDtoInterfaceString(): void
    {
        $facade = new PopoFacade();

        $configurator = (new BuilderConfigurator())
            ->setTemplateDirectory($this->templateDirectory)
            ->setNamespace('Popo\Tests');

        $schemaData = [
            'name' => 'FooGenerated',
            'schema' => [[
                'name' => 'fooId',
                'type' => 'int',
            ]],
        ];

        $schema = $this->buildSchema($schemaData);
        $generatedString = $facade->generateDtoInterfaceString($configurator, $schema);

        $expectedString = '
<?php

declare(strict_types = 1);

namespace Popo\Tests;

interface FooGeneratedInterface
{
    /**
    * @return array
    */
    public function toArray(): array;

    /**
    * @param array $data
    *
    * @return \Popo\Tests\FooGeneratedInterface
    */
    public function fromArray(array $data): \Popo\Tests\FooGeneratedInterface;

    
    /**
     * @return integer|null
     */
    public function getFooId(): ?int;

    /**
     * @param integer|null $fooId
     *
     * @return self
     */
    public function setFooId(?int $fooId): \Popo\Tests\FooGeneratedInterface;

    /**
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireFooId(): int;


    
}
';

        $this->assertEquals(trim($expectedString), trim($generatedString));
    }
}
