<?php

declare(strict_types = 1);

namespace Generated\Popo;

/**
 * Code generated by POPO generator, do not edit.
 */
class FooBar implements \Generated\Popo\FooBarInterface
{
    /**
     * @var array
     */
    protected $data = array (
  'fooBarId' => NULL,
  'fooBarStringValue' => NULL,
  'buzzPropertyInFooBar' => NULL,
);

    /**
     * @var array
     */
    protected $default = array (
  'fooBarId' => NULL,
  'fooBarStringValue' => NULL,
  'buzzPropertyInFooBar' => NULL,
);

    /**
    * @var array
    */
    protected $propertyMapping = array (
  'fooBarId' => 'int',
  'fooBarStringValue' => 'string',
  'buzzPropertyInFooBar' => 'string',
);

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            return null;
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;
    }

    /**
     * @return array
     */
    protected function getPropertyNames(): array
    {
        return \array_keys(
            $this->propertyMapping
        );
    }

    /**
     * @return array
     */
    public function toArray(): array
    {
        $data = [];
        foreach ($this->propertyMapping as $key => $type) {
            $data[$key] = null;

            if (isset($this->data[$key])) {
                $value = $this->data[$key];
                $data[$key] = $value;

                if (\is_object($value) && \method_exists($value, 'toArray')) {
                    $data[$key] = $value->toArray();
                }
            }
        }

        return $data;
    }

    /**
     * @param array $data
     *
     * @return \Generated\Popo\FooBarInterface
     */
    public function fromArray(array $data): \Generated\Popo\FooBarInterface
    {
        $result = [];
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = $this->default[$key];
            if (\array_key_exists($key, $data)) {
                $result[$key] = $data[$key];
            }

            if (\is_array($result[$key]) && \class_exists($type)) {
                $popo = new $type();
                if (\method_exists($popo, 'fromArray')) {
                    $popo->fromArray($result[$key]);
                }
                $result[$key] = $popo;
            }
        }

        $this->data = $result;

        return $this;
    }

    /**
     * @param string $property
     *
     * @throws \UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new \UnexpectedValueException(\sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    
    /**
     * @return integer|null
     */
    public function getFooBarId(): ?int
    {
        return $this->popoGetValue('fooBarId');
    }

    /**
     * @param integer|null $fooBarId
     *
     * @return self
     */
    public function setFooBarId(?int $fooBarId): \Generated\Popo\FooBarInterface
    {
        $this->popoSetValue('fooBarId', $fooBarId);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireFooBarId(): int
    {
        $this->assertPropertyValue('fooBarId');

        return (int)$this->popoGetValue('fooBarId');
    }

    /**
     * @return string|null
     */
    public function getFooBarStringValue(): ?string
    {
        return $this->popoGetValue('fooBarStringValue');
    }

    /**
     * @param string|null $fooBarStringValue
     *
     * @return self
     */
    public function setFooBarStringValue(?string $fooBarStringValue): \Generated\Popo\FooBarInterface
    {
        $this->popoSetValue('fooBarStringValue', $fooBarStringValue);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireFooBarStringValue(): string
    {
        $this->assertPropertyValue('fooBarStringValue');

        return (string)$this->popoGetValue('fooBarStringValue');
    }

    /**
     * @return string|null
     */
    public function getBuzzPropertyInFooBar(): ?string
    {
        return $this->popoGetValue('buzzPropertyInFooBar');
    }

    /**
     * @param string|null $buzzPropertyInFooBar
     *
     * @return self
     */
    public function setBuzzPropertyInFooBar(?string $buzzPropertyInFooBar): \Generated\Popo\FooBarInterface
    {
        $this->popoSetValue('buzzPropertyInFooBar', $buzzPropertyInFooBar);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireBuzzPropertyInFooBar(): string
    {
        $this->assertPropertyValue('buzzPropertyInFooBar');

        return (string)$this->popoGetValue('buzzPropertyInFooBar');
    }

}
