<?php

declare(strict_types = 1);

namespace Generated\Popo;

/**
 * Code generated by POPO generator, do not edit.
 */
class Foo 
{
    /**
     * @var array
     */
    protected $data = array (
  'fooId' => NULL,
  'username' => 'JohnDoe',
  'password' => NULL,
  'isLoggedIn' => NULL,
  'resetPassword' => NULL,
  'optionalData' => 
  array (
  ),
  'fooBar' => NULL,
);

    /**
     * @var array
     */
    protected $default = array (
  'fooId' => NULL,
  'username' => 'JohnDoe',
  'password' => NULL,
  'isLoggedIn' => NULL,
  'resetPassword' => NULL,
  'optionalData' => 
  array (
  ),
  'fooBar' => NULL,
);

    /**
    * @var array
    */
    protected $propertyMapping = array (
  'fooId' => 'int',
  'username' => 'string',
  'password' => 'string',
  'isLoggedIn' => 'bool',
  'resetPassword' => 'bool',
  'optionalData' => 'array',
  'fooBar' => 'FooBar',
);

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            return null;
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;
    }

    /**
     * @return array
     */
    protected function getPropertyNames(): array
    {
        return \array_keys(
            $this->propertyMapping
        );
    }

    /**
     * @return array
     */
    public function toArray(): array
    {
        $data = [];
        foreach ($this->propertyMapping as $key => $type) {
            $data[$key] = null;

            if (isset($this->data[$key])) {
                $value = $this->data[$key];
                $data[$key] = $value;

                if (\is_object($value) && \method_exists($value, 'toArray')) {
                    $data[$key] = $value->toArray();
                }
            }
        }

        return $data;
    }

    /**
     * @param array $data
     *
     * @return \Generated\Popo\Foo
     */
    public function fromArray(array $data): \Generated\Popo\Foo
    {
        $result = [];
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = $this->default[$key];
            if (\array_key_exists($key, $data)) {
                $result[$key] = $data[$key];
            }

            if (\is_array($result[$key]) && \class_exists($type)) {
                $popo = new $type();
                if (\method_exists($popo, 'fromArray')) {
                    $popo->fromArray($result[$key]);
                }
                $result[$key] = $popo;
            }
        }

        $this->data = $result;

        return $this;
    }

    /**
     * @param string $property
     *
     * @throws \UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new \UnexpectedValueException(\sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    
    /**
     * @return integer|null
     */
    public function getFooId(): ?int
    {
        return $this->popoGetValue('fooId');
    }

    /**
     * @param integer|null $fooId
     *
     * @return self
     */
    public function setFooId(?int $fooId): \Generated\Popo\Foo
    {
        $this->popoSetValue('fooId', $fooId);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireFooId(): int
    {
        $this->assertPropertyValue('fooId');

        return (int)$this->popoGetValue('fooId');
    }

    /**
     * @return string|null
     */
    public function getUsername(): ?string
    {
        return $this->popoGetValue('username');
    }

    /**
     * @param string|null $username
     *
     * @return self
     */
    public function setUsername(?string $username): \Generated\Popo\Foo
    {
        $this->popoSetValue('username', $username);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireUsername(): string
    {
        $this->assertPropertyValue('username');

        return (string)$this->popoGetValue('username');
    }

    /**
     * @return string|null
     */
    public function getPassword(): ?string
    {
        return $this->popoGetValue('password');
    }

    /**
     * @param string|null $password
     *
     * @return self
     */
    public function setPassword(?string $password): \Generated\Popo\Foo
    {
        $this->popoSetValue('password', $password);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requirePassword(): string
    {
        $this->assertPropertyValue('password');

        return (string)$this->popoGetValue('password');
    }

    /**
     * @return boolean|null
     */
    public function isLoggedIn(): ?bool
    {
        return $this->popoGetValue('isLoggedIn');
    }

    /**
     * @param boolean|null $isLoggedIn
     *
     * @return self
     */
    public function setIsLoggedIn(?bool $isLoggedIn): \Generated\Popo\Foo
    {
        $this->popoSetValue('isLoggedIn', $isLoggedIn);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return boolean
     */
    public function requireIsLoggedIn(): bool
    {
        $this->assertPropertyValue('isLoggedIn');

        return (bool)$this->popoGetValue('isLoggedIn');
    }

    /**
     * @return boolean|null
     */
    public function resetPassword(): ?bool
    {
        return $this->popoGetValue('resetPassword');
    }

    /**
     * @param boolean|null $resetPassword
     *
     * @return self
     */
    public function setResetPassword(?bool $resetPassword): \Generated\Popo\Foo
    {
        $this->popoSetValue('resetPassword', $resetPassword);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return boolean
     */
    public function requireResetPassword(): bool
    {
        $this->assertPropertyValue('resetPassword');

        return (bool)$this->popoGetValue('resetPassword');
    }

    /**
     * @return array|null
     */
    public function getOptionalData(): ?array
    {
        return $this->popoGetValue('optionalData');
    }

    /**
     * @param array|null $optionalData
     *
     * @return self
     */
    public function setOptionalData(?array $optionalData): \Generated\Popo\Foo
    {
        $this->popoSetValue('optionalData', $optionalData);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return array
     */
    public function requireOptionalData(): array
    {
        $this->assertPropertyValue('optionalData');

        return (array)$this->popoGetValue('optionalData');
    }

    /**
     * @return FooBar|null
     */
    public function getFooBar(): ?FooBar
    {
        return $this->popoGetValue('fooBar');
    }

    /**
     * @param FooBar|null $fooBar
     *
     * @return self
     */
    public function setFooBar(?FooBar $fooBar): \Generated\Popo\Foo
    {
        $this->popoSetValue('fooBar', $fooBar);

        return $this;
    }

    /**
     * @throws \UnexpectedValueException
     *
     * @return FooBar
     */
    public function requireFooBar(): FooBar
    {
        $this->assertPropertyValue('fooBar');

        return $this->popoGetValue('fooBar');
    }

}
