<?php

declare(strict_types = 1);

namespace <<NAMESPACE>>;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
<<ABSTRACT>>class <<CLASSNAME>><<EXTENDS>> <<IMPLEMENTS_INTERFACE>>
{
    /**
     * @var array
     */
    protected $data = <<SCHEMA_DATA>>;

    /**
     * @var array
     */
    protected $default = <<SCHEMA_DATA>>;

    /**
     * @var array
     */
    protected $propertyMapping = <<PROPERTY_MAPPING>>;

    /**
     * @var array
     */
    protected $collectionItems = <<COLLECTION_ITEMS>>;

    /**
     * @var array
     */
    protected $updateMap = [];

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            $className = trim($this->propertyMapping[$property]);
            if ($className !== ''  && class_exists($className)) {
                $this->data[$property] = new $className();
            } else {
                return null;
            }
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;

        $this->updateMap[$property] = true;
    }

    /**
     * @return array
     */
    protected function getPropertyNames(): array
    {
        return \array_keys(
            $this->propertyMapping
        );
    }

    protected function isCollectionItem(string $key, array $data): bool
    {
        return $this->collectionItems[$key] !== '' &&
            \is_array($data[$key]) &&
            \class_exists($this->collectionItems[$key]);
    }

    /**
     * @param string $property
     *
     * @throws \UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new \UnexpectedValueException(\sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @throws \InvalidArgumentException
     * @return void
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = \trim(\strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!\is_array($collection) || $type !== 'array') {
            throw new \InvalidArgumentException('Cannot add item to non array type: ' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    <<ARRAYABLE_BLOCK>>

    <<METHODS>>

    <<COLLECTION>>
}
